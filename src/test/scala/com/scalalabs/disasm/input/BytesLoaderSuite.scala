package com.scalalabs.disasm.input

import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers
import org.scalatest.junit.JUnitRunner
import org.junit.runner.RunWith

@RunWith(classOf[JUnitRunner])
class BytesLoaderSuite extends FunSuite with ShouldMatchers {

  
  class TestObj
  
  test("basic") {
    val bytes:Array[Byte] = Array[Byte](00, 01, 0xff.toByte)

    val t = new TestObj with BytesLoader
    t.loader.load(bytes)
//    println( "S " + t.loader.stream )
    
    assert( 0x00 === t.loader.nextByte)
    assert( 0x01 === t.loader.nextByte)
    assert( 0xff === t.loader.nextByte)
    
  }

  
  ignore("bytes") {

    val t = new TestObj with DebugLoader
    t.loader.load(clazzStr)
    val s = t.loader.buffer
    println("Length " + s.length)
    (1 to 10).foreach( i => println("" + s(i).toInt.toHexString))
//    t.loader.load(clazzStr)
//    println( "S " + t.loader.stream )
    
    assert( 0x00 === t.loader.nextByte)
    assert( 0x01 === t.loader.nextByte)
    assert( 0xff === t.loader.nextByte)
    
  }

  val clazzStr
  
}